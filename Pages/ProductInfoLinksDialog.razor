@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor
@using MudBlazor.Services
@using MetaSearchApp.Models

@inject IProductInfoLinksService LinksService
@inject ISnackbar Snackbar

<MudDialog MaxWidth="MaxWidth.Medium">
    <TitleContent>
        <MudText Typo="Typo.h6">Product Information Links Management</MudText>
        <MudText Typo="Typo.caption" Class="mud-text-secondary">Product ID: @ProductId</MudText>
    </TitleContent>
    
    <DialogContent>
        <MudContainer Class="pa-0">
            @* Prescribing Information *@
            <MudPaper Class="pa-3 mb-3" Elevation="1">
                <MudText Typo="Typo.subtitle2" Class="mb-2">Prescribing Information</MudText>
                <MudTextField @bind-Value="PrescribingUrl" 
                              Placeholder="Enter URL" 
                              MaxLength="500" 
                              Immediate="true"
                              HelperText="@GetCharacterCount(PrescribingUrl)"
                              Error="@GetValidationError(PrescribingUrl, PrescribingEnabled)"
                              ErrorText="@GetErrorText(PrescribingUrl, PrescribingEnabled)" />
                <MudCheckBox @bind-Value="PrescribingEnabled" 
                             Label="Enable Prescribing Information" 
                             Class="mt-2" />
            </MudPaper>
            
            @* Patient Information *@
            <MudPaper Class="pa-3 mb-3" Elevation="1">
                <MudText Typo="Typo.subtitle2" Class="mb-2">Patient Information</MudText>
                <MudTextField @bind-Value="PatientInfoUrl" 
                              Placeholder="Enter URL" 
                              MaxLength="500" 
                              Immediate="true"
                              HelperText="@GetCharacterCount(PatientInfoUrl)"
                              Error="@GetValidationError(PatientInfoUrl, PatientInfoEnabled)"
                              ErrorText="@GetErrorText(PatientInfoUrl, PatientInfoEnabled)" />
                <MudCheckBox @bind-Value="PatientInfoEnabled" 
                             Label="Enable Patient Information" 
                             Class="mt-2" />
            </MudPaper>
            
            @* Medication Guide *@
            <MudPaper Class="pa-3 mb-3" Elevation="1">
                <MudText Typo="Typo.subtitle2" Class="mb-2">Medication Guide</MudText>
                <MudTextField @bind-Value="MedicationGuideUrl" 
                              Placeholder="Enter URL" 
                              MaxLength="500" 
                              Immediate="true"
                              HelperText="@GetCharacterCount(MedicationGuideUrl)"
                              Error="@GetValidationError(MedicationGuideUrl, MedicationGuideEnabled)"
                              ErrorText="@GetErrorText(MedicationGuideUrl, MedicationGuideEnabled)" />
                <MudCheckBox @bind-Value="MedicationGuideEnabled" 
                             Label="Enable Medication Guide" 
                             Class="mt-2" />
            </MudPaper>
            
            @* Instructions for Use *@
            <MudPaper Class="pa-3 mb-3" Elevation="1">
                <MudText Typo="Typo.subtitle2" Class="mb-2">Instructions for Use</MudText>
                <MudTextField @bind-Value="InstructionsForUseUrl" 
                              Placeholder="Enter URL" 
                              MaxLength="500" 
                              Immediate="true"
                              HelperText="@GetCharacterCount(InstructionsForUseUrl)"
                              Error="@GetValidationError(InstructionsForUseUrl, InstructionsForUseEnabled)"
                              ErrorText="@GetErrorText(InstructionsForUseUrl, InstructionsForUseEnabled)" />
                <MudCheckBox @bind-Value="InstructionsForUseEnabled" 
                             Label="Enable Instructions for Use" 
                             Class="mt-2" />
            </MudPaper>
        </MudContainer>
    </DialogContent>

    <DialogActions>
        <MudButton Variant="Variant.Text" OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary"
                   Disabled="@(!IsFormValid || _busy)"
                   OnClick="SaveAsync"
                   Variant="Variant.Filled">
            @if (_busy)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">Saving...</MudText>
            }
            else
            {
                <MudText>Save</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IDialogReference MudDialog { get; set; } = default!;
    [Parameter] public int ProductId { get; set; }

    private bool _busy;
    
    // Simple properties for binding
    private string? PrescribingUrl { get; set; }
    private bool PrescribingEnabled { get; set; }
    
    private string? PatientInfoUrl { get; set; }
    private bool PatientInfoEnabled { get; set; }
    
    private string? MedicationGuideUrl { get; set; }
    private bool MedicationGuideEnabled { get; set; }
    
    private string? InstructionsForUseUrl { get; set; }
    private bool InstructionsForUseEnabled { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _busy = true;
        try
        {
            var existing = await LinksService.GetAsync(ProductId);
            if (existing != null)
            {
                PrescribingUrl = existing.PrescribingInformation.Url;
                PrescribingEnabled = existing.PrescribingInformation.Enabled;
                
                PatientInfoUrl = existing.PatientInformation.Url;
                PatientInfoEnabled = existing.PatientInformation.Enabled;
                
                MedicationGuideUrl = existing.MedicationGuide.Url;
                MedicationGuideEnabled = existing.MedicationGuide.Enabled;
                
                InstructionsForUseUrl = existing.InstructionsForUse.Url;
                InstructionsForUseEnabled = existing.InstructionsForUse.Enabled;
            }
        }
        catch (Exception ex)
        {
            // Fallback to default values if service fails
            Snackbar.Add($"Could not load existing data: {ex.Message}", Severity.Warning);
        }
        finally
        {
            _busy = false;
        }
    }

    private string GetCharacterCount(string? url)
    {
        return $"Characters used: {(url?.Length ?? 0)}/500";
    }

    private bool GetValidationError(string? url, bool enabled)
    {
        if (!enabled) return false;
        return string.IsNullOrWhiteSpace(url) || !UrlRules.IsHttpOrHttps(url);
    }

    private string GetErrorText(string? url, bool enabled)
    {
        if (!enabled) return "";
        if (string.IsNullOrWhiteSpace(url)) return "URL required.";
        if (!UrlRules.IsHttpOrHttps(url)) return "Enter a valid http(s) URL.";
        return "";
    }

    private bool IsFormValid
    {
        get
        {
            return ValidateUrl(PrescribingUrl, PrescribingEnabled) &&
                   ValidateUrl(PatientInfoUrl, PatientInfoEnabled) &&
                   ValidateUrl(MedicationGuideUrl, MedicationGuideEnabled) &&
                   ValidateUrl(InstructionsForUseUrl, InstructionsForUseEnabled);
        }
    }

    private bool ValidateUrl(string? url, bool enabled)
    {
        if (!enabled) return true;
        
        return !string.IsNullOrWhiteSpace(url) && 
               UrlRules.IsHttpOrHttps(url) && 
               url.Trim().Length <= 500;
    }

    private async Task SaveAsync()
    {
        if (!IsFormValid) return;

        _busy = true;
        try
        {
            var model = new ProductInfoLinksDto
            {
                ProductId = ProductId.ToString(),
                PrescribingInformation = new(PrescribingEnabled, PrescribingUrl?.Trim()),
                PatientInformation = new(PatientInfoEnabled, PatientInfoUrl?.Trim()),
                MedicationGuide = new(MedicationGuideEnabled, MedicationGuideUrl?.Trim()),
                InstructionsForUse = new(InstructionsForUseEnabled, InstructionsForUseUrl?.Trim())
            };

            await LinksService.SaveAsync(model);
            Snackbar.Add("Product information links updated.", Severity.Success);
            MudDialog?.Close(DialogResult.Ok(true));
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving: {ex.Message}", Severity.Error);
        }
        finally 
        { 
            _busy = false; 
        }
    }

    private void Cancel() => MudDialog?.Close(DialogResult.Cancel());
}
